import React, { useState, useRef, useEffect } from 'react';
import './Chat.css';
import { IoSendSharp } from 'react-icons/io5';
import aiService from '../services/aiService';
import ModalImage from 'react-modal-image';

export default function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isButtonDisabled, setIsButtonDisabled] = useState(false);
  const [isBotTyping, setIsBotTyping] = useState(false);
  const endOfMessagesRef = useRef(null);

  const getCurrentTime = () => {
    const now = new Date();
    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (input.trim()) {
      setMessages((prevMessages) => [
        ...prevMessages,
        { text: input, sender: 'user', time: getCurrentTime() }
      ]);
      setInput('');
      setIsButtonDisabled(true);
      setIsBotTyping(true);

      try {
        const imageUrl = await aiService.sendPrompt(input);
        setMessages((prevMessages) => [
          ...prevMessages,
          { text: imageUrl, sender: 'bot', time: getCurrentTime(), isImage: true },
        ]);
      } catch (error) {
        setMessages((prevMessages) => [
          ...prevMessages,
          { text: 'Error al generar la imagen. IntÃ©ntalo de nuevo.', sender: 'bot', time: getCurrentTime() },
        ]);
      } finally {
        setIsBotTyping(false);
        setIsButtonDisabled(false);
      }
    }
  };

  useEffect(() => {
    if (endOfMessagesRef.current) {
      endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages, isBotTyping]);

  return (
    <div className="body">
      <h1 className="chat-title">Images AI Bot</h1>
      <div className="chat-display" id="chatDisplay">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`chat-message ${message.sender === 'user' ? 'user' : 'bot'}`}
          >
            {message.isImage ? (
              <ModalImage
                small={message.text}
                large={message.text}
                alt="Generated by AI"
                hideZoom={false}
                hideDownload={false}
                className="generated-image"
              />
            ) : (
              <div className="message-content">{message.text}</div>
            )}
            <div className={`message-time ${message.sender === 'user' ? 'user-time' : 'bot-time'}`}>
              {message.time}
            </div>
          </div>
        ))}
        {isBotTyping && (
          <div className="chat-message bot typing-indicator">
            <b>.</b>
            <b>.</b>
            <b>.</b>
          </div>
        )}
        <div ref={endOfMessagesRef} />
      </div>
      <div className="chat-container">
        <form className="chat-input-container" onSubmit={handleSendMessage}>
          <input
            placeholder="Type your message..."
            className="chat-input"
            id="chatInput"
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            autoComplete="off"
            disabled={isButtonDisabled}
          />
          <button
            className="send-button"
            id="sendButton"
            type="submit"
            disabled={isButtonDisabled}
          >
            <IoSendSharp />
          </button>
        </form>
      </div>
    </div>
  );
}
